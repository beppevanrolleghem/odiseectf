
'''

16^10 mogelijkheden, nie plezant dus, mss zoeken naar een andere manier da we iets kunnen vinden.

wat doet de expand key eigenlijk? dat soort dingen


expand key repeat gewoon de key die hij binnen krijgt (de 10 bytes) tot het de lengte heeft van het bestand dat geencrypt moet worden

nu is de vraag, is er een stuk in een gif dat elke keer hetzelfde is en lang genoeg is dat we zo de key terug kunnen vinden. 
'''
dus, aangezien ons bestand een gif is betekend dit dat het begint met de letters GIF, dus de eerste 3 bytes kunnen ons al een stuk van onze key geven
de volgende 3 bytes zijn 2 mogelijkheden 87a of 89a, dit kan ons ook al een voordeel geven, maar dan komen we inde problemen. meeste van de volgende bytes zijn afhankelijk van de afbeelding, daarna komen we in de volgende blok, nvm onze foto is 960 op 640, dit is een grote hulp want dat betekend dat we onze volledige string zullen hebben op 1 byte na: de eerste 3 bytes : GIF gevolgd door de volgende 3 bytes 87a/89a en dan gevolgd door 4 bytes die de grote van de afbeelding tonen,
   waarvan we weten dat deze 960 op 640 px is

bij onze voorbeeld foto was dit:
4947 3846 6139 03c0 0280 00f7 0000 0000

0000 0033 6600 0000 0099 cc00 0000 00ff

002b 2b00 0033 662b 

G I F 8 9 a 300 003 200 002

na een poging om onze afbeelding een key uit te krijgen kreeg ik deze terug:
473b572b07d029db3b82 
blijkbaar verkeerd erges iets gedaan, dit is misschien de key?
f7a31b32b15694383c90

daarboven op heeft ons voorbeeld dezelfde dimensies? demensies? een van die twee. heeft dezelfde hoeveelheden van breedte en hoogte als onze te cracken gif. het enige dat kan veranderen is de version, dat van 89a naar 87a kan gaan. dit betekend dat we dus de key veel gemakkelijker eruit kunnen halen door te kijken naar de binaire waarden van deze letters en zo een xor uit te voeren om onze key te krijgen. yay

temp:

         2b00 0099 cc2b 2b00





hier is wat info over gifs:
{
            GIF Header
    Offset   Length   Contents
      0      3 bytes  "GIF"
      3      3 bytes  "87a" or "89a"
      6      2 bytes  <Logical Screen Width>
      8      2 bytes  <Logical Screen Height>
     10      1 byte   bit 0:    Global Color Table Flag (GCTF)
                      bit 1..3: Color Resolution
                      bit 4:    Sort Flag to Global Color Table
                      bit 5..7: Size of Global Color Table: 2^(1+n)
     11      1 byte   <Background Color Index>
     12      1 byte   <Pixel Aspect Ratio>
     13      ? bytes  <Global Color Table(0..255 x 3 bytes) if GCTF is one>
             ? bytes  <Blocks>
             1 bytes  <Trailer> (0x3b)
    Image Block
    Offset   Length   Contents
      0      1 byte   Image Separator (0x2c)
      1      2 bytes  Image Left Position
      3      2 bytes  Image Top Position
      5      2 bytes  Image Width
      7      2 bytes  Image Height
      8      1 byte   bit 0:    Local Color Table Flag (LCTF)
                      bit 1:    Interlace Flag
                      bit 2:    Sort Flag
                      bit 2..3: Reserved
                      bit 4..7: Size of Local Color Table: 2^(1+n)
             ? bytes  Local Color Table(0..255 x 3 bytes) if LCTF is one
             1 byte   LZW Minimum Code Size
    [ // Blocks
             1 byte   Block Size (s)
            (s)bytes  Image Data
    ]*
             1 byte   Block Terminator(0x00)
    Graphic Control Extension Block
    Offset   Length   Contents
      0      1 byte   Extension Introducer (0x21)
      1      1 byte   Graphic Control Label (0xf9)
      2      1 byte   Block Size (0x04)
      3      1 byte   bit 0..2: Reserved
                      bit 3..5: Disposal Method
                      bit 6:    User Input Flag
                      bit 7:    Transparent Color Flag
      4      2 bytes  Delay Time (1/100ths of a second)
      6      1 byte   Transparent Color Index
      7      1 byte   Block Terminator(0x00)
    Comment Extension Block
    Offset   Length   Contents
      0      1 byte   Extension Introducer (0x21)
      1      1 byte   Comment Label (0xfe)
    [
             1 byte   Block Size (s)
            (s)bytes  Comment Data
    ]*
             1 byte   Block Terminator(0x00)
    Plain Text Extension Block
    Offset   Length   Contents
      0      1 byte   Extension Introducer (0x21)
      1      1 byte   Plain Text Label (0x01)
      2      1 byte   Block Size (0x0c)
      3      2 bytes  Text Grid Left Position
      5      2 bytes  Text Grid Top Position
      7      2 bytes  Text Grid Width
      9      2 bytes  Text Grid Height
     10      1 byte   Character Cell Width(
     11      1 byte   Character Cell Height
     12      1 byte   Text Foreground Color Index(
     13      1 byte   Text Background Color Index(
    [
             1 byte   Block Size (s)
            (s)bytes  Plain Text Data
    ]*
             1 byte   Block Terminator(0x00)
    Application Extension Block
    Offset   Length   Contents
      0      1 byte   Extension Introducer (0x21)
      1      1 byte   Application Label (0xff)
      2      1 byte   Block Size (0x0b)
      3      8 bytes  Application Identifire
    [
             1 byte   Block Size (s)
            (s)bytes  Application Data
    ]*
             1 byte   Block Terminator(0x00)
}
